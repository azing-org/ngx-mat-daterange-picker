{
  "version": 3,
  "file": "ngx-mat-daterange-picker.umd.min.js",
  "sources": [
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/range-store.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/config-store.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.animations.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/calendar-overlay.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp/ngx-mat-drp.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/calendar-wrapper/calendar-wrapper.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/presets/presets.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable, Inject, InjectionToken } from '@angular/core';\r\nimport { Range } from '../model/model';\r\nimport { Subject } from 'rxjs';\r\n/* import { DATE } from '../ngx-drp.module'; */\r\n\r\nexport const DATE = new InjectionToken<Date>('date');\r\n\r\n@Injectable()\r\nexport class RangeStoreService {\r\n  rangeUpdate$: Subject<Range> = new Subject<Range>();\r\n\r\n  constructor(\r\n    @Inject(DATE) private _fromDate: Date,\r\n    @Inject(DATE) private _toDate: Date\r\n  ) {}\r\n\r\n  /* set fromDate(fromDate:Date) {\r\n    this._fromDate = fromDate;\r\n  } */\r\n\r\n  get fromDate(): Date {\r\n    return this._fromDate;\r\n  }\r\n\r\n  /* set toDate(toDate:Date) {\r\n    this._toDate = toDate;\r\n  } */\r\n\r\n  get toDate(): Date {\r\n    return this._toDate;\r\n  }\r\n\r\n  updateRange(fromDate: Date = this._fromDate, toDate: Date = this._toDate) {\r\n    this._fromDate = fromDate;\r\n    this._toDate = toDate;\r\n    this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { NgxDrpOptions } from '../model/model';\r\n\r\n@Injectable()\r\nexport class ConfigStoreService {\r\n  private _ngxDrpOptions: NgxDrpOptions;\r\n  private defaultOptions = {\r\n    excludeWeekends: false,\r\n    animation: true,\r\n    locale: 'en-US',\r\n    fromMinMax: { fromDate: null, toDate: null },\r\n    toMinMax: { fromDate: null, toDate: null },\r\n    rangeLabel: 'Add End-Date',\r\n    singleDate: true, // false = dateRange\r\n  };\r\n\r\n  constructor() {}\r\n\r\n  get ngxDrpOptions(): NgxDrpOptions {\r\n    return this._ngxDrpOptions;\r\n  }\r\n\r\n  set ngxDrpOptions(options: NgxDrpOptions) {\r\n    this._ngxDrpOptions = { ...this.defaultOptions, ...options };\r\n  }\r\n}\r\n",
    "import {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n  group\r\n} from '@angular/animations';\r\n\r\nexport const pickerOverlayAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n} = {\r\n  /** Transforms the height of the picker overlay content. */\r\n  transformPanel: trigger('transformPickerOverlay', [\r\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\r\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\r\n    transition('void => enter', group([\r\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ])),\r\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\r\n  ])\r\n};\r\n",
    "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { PresetItem, NgxDrpOptions } from '../model/model';\r\nimport { RangeStoreService } from '../services/range-store.service';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { ConfigStoreService } from '../services/config-store.service';\r\nimport { pickerOverlayAnimations } from './picker-overlay.animations';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-drp-picker-overlay',\r\n  template: `<div [@transformPickerOverlay]=\"shouldAnimate\" class=\"ngx-mat-drp-calendar-container\">\r\n\r\n  <div class=\"ngx-mat-drp-calendar-item\">\r\n    <calendar-wrapper \r\n    [prefixLabel]=\"startDatePrefix\"\r\n    [selectedDate]=\"fromDate\"\r\n    [minDate]=\"fromMinDate\"\r\n    [maxDate]=\"fromMaxDate\"\r\n    (selectedDateChange)=\"updateFromDate($event)\">\r\n  </calendar-wrapper>\r\n  </div>\r\n  <div class=\"ngx-mat-drp-calendar-item\" *ngIf='!singleDate'>\r\n    <calendar-wrapper \r\n    [prefixLabel]=\"endDatePrefix\"\r\n    [selectedDate]=\"toDate\"\r\n    [minDate]=\"toMinDate\"\r\n    [maxDate]=\"toMaxDate\" \r\n    (selectedDateChange)=\"updateToDate($event)\">\r\n  </calendar-wrapper>\r\n  </div>\r\n  <div class=\"ngx-mat-drp-calendar-item\">\r\n    <div class=\"ngx-mat-drp-menu\">\r\n      <mat-drp-presets [presets]=\"presets\" (presetChanged)=\"updateRangeByPreset($event)\"></mat-drp-presets>\r\n      <div class=\"ngx-mat-drp-controls\">\r\n        <button mat-button (click)=\"addEndDate($event)\">{{rangeLabel}}</button>\r\n        <button mat-button (click)=\"discardNewDates($event)\" *ngIf=\"false\">{{cancelLabel}}</button>\r\n        <button mat-button color=\"primary\" (click)=\"applyNewDates($event)\">{{applyLabel}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.ngx-mat-drp-calendar-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:distribute;justify-content:space-around;min-width:350px;min-height:300px}.ngx-mat-drp-calendar-item{-ms-flex-preferred-size:1;flex-basis:1;min-width:210px;padding:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.ngx-mat-drp-menu{-ms-flex-preferred-size:1;flex-basis:1;height:100%}.ngx-mat-drp-controls{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin:10% auto}.ngx-mat-drp-overlay{-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fff;border-radius:2px}.ngx-mat-drp-overlay-backdrop{background-color:rgba(0,0,0,.2);opacity:.2}`],\r\n  animations: [pickerOverlayAnimations.transformPanel],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PickerOverlayComponent implements OnInit {\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  fromMinDate: Date;\r\n  fromMaxDate: Date;\r\n  toMinDate: Date;\r\n  toMaxDate: Date;\r\n  presets: Array<PresetItem> = [];\r\n  startDatePrefix: string;\r\n  endDatePrefix: string;\r\n  applyLabel: string;\r\n  rangeLabel: string;\r\n  cancelLabel: string;\r\n  shouldAnimate: string;\r\n  singleDate: boolean;\r\n\r\n  constructor(\r\n    private rangeStoreService: RangeStoreService,\r\n    private configStoreService: ConfigStoreService,\r\n    private overlayRef: OverlayRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.fromDate = this.rangeStoreService.fromDate;\r\n    this.toDate = this.rangeStoreService.toDate;\r\n    this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\r\n    this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\r\n    this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\r\n    this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\r\n    this.presets = this.configStoreService.ngxDrpOptions.presets;\r\n    this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\r\n      ? 'enter'\r\n      : 'noop';\r\n    ({\r\n      fromDate: this.fromMinDate,\r\n      toDate: this.fromMaxDate\r\n    } = this.configStoreService.ngxDrpOptions.fromMinMax);\r\n    ({\r\n      fromDate: this.toMinDate,\r\n      toDate: this.toMaxDate\r\n    } = this.configStoreService.ngxDrpOptions.toMinMax);\r\n    this.setSingleDate(this.configStoreService.ngxDrpOptions.singleDate);\r\n  }\r\n\r\n  updateFromDate(date) {\r\n    this.fromDate = date;\r\n  }\r\n\r\n  updateToDate(date) {\r\n    this.toDate = date;\r\n  }\r\n\r\n  updateRangeByPreset(presetItem: PresetItem) {\r\n    this.updateFromDate(presetItem.range.fromDate);\r\n    this.updateToDate(presetItem.range.toDate);\r\n  }\r\n\r\n  applyNewDates(e) {\r\n    this.rangeStoreService.updateRange(this.fromDate, this.configStoreService.ngxDrpOptions.singleDate ? null : this.toDate);\r\n    this.disposeOverLay();\r\n  }\r\n\r\n  addEndDate(e) {\r\n    this.configStoreService.ngxDrpOptions.singleDate = !this.configStoreService.ngxDrpOptions.singleDate;\r\n    this.setSingleDate(this.configStoreService.ngxDrpOptions.singleDate);\r\n  }\r\n  discardNewDates(e) {\r\n    // this.rangeStoreService.updateRange();\r\n    this.disposeOverLay();\r\n  }\r\n\r\n  private disposeOverLay() {\r\n    this.overlayRef.dispose();\r\n  }\r\n\r\n  private setSingleDate(singleDate: boolean) {\r\n    this.singleDate = singleDate;\r\n    this.rangeLabel = this.getRangeLabel(singleDate);\r\n  }\r\n  private getRangeLabel(singleDate: boolean): string {\r\n    if (!!singleDate) {\r\n      return this.configStoreService.ngxDrpOptions.addEndDateLabel || 'Add End-Date';\r\n    } else {\r\n      return this.configStoreService.ngxDrpOptions.removeEndDateLabel || 'Remove End-Date';\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable, ElementRef, Injector } from '@angular/core';\r\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\r\nimport { NgxDrpOptions, CalendarOverlayConfig } from '../model/model';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { PickerOverlayComponent } from '../picker-overlay/picker-overlay.component';\r\n\r\nconst DEFAULT_CONFIG: CalendarOverlayConfig = {\r\n  panelClass: 'ngx-mat-drp-overlay',\r\n  hasBackdrop: true,\r\n  backdropClass: 'ngx-mat-drp-overlay-backdrop',\r\n  shouldCloseOnBackdropClick: true\r\n};\r\n\r\n@Injectable()\r\nexport class CalendarOverlayService {\r\n  private hostElemRef: ElementRef;\r\n\r\n  constructor(private overlay: Overlay, private injector: Injector) {}\r\n\r\n  open(\r\n    config: CalendarOverlayConfig = {},\r\n    hostElemRef: ElementRef\r\n  ): OverlayRef {\r\n    this.hostElemRef = hostElemRef;\r\n    const overlayConfig = { ...DEFAULT_CONFIG, ...config };\r\n    const overlayRef = this.createOverlay(overlayConfig);\r\n    const portalInjector = this.createInjector(overlayRef);\r\n    const calendarPortal = new ComponentPortal(\r\n      PickerOverlayComponent,\r\n      null,\r\n      portalInjector\r\n    );\r\n    overlayRef.attach(calendarPortal);\r\n\r\n    overlayRef\r\n      .backdropClick()\r\n      .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\r\n      .subscribe(() => overlayRef.dispose());\r\n\r\n    return overlayRef;\r\n  }\r\n\r\n  private createOverlay(config: CalendarOverlayConfig): OverlayRef {\r\n    const overlayConfig = this.getOverlayConfig(config);\r\n    return this.overlay.create(overlayConfig);\r\n  }\r\n\r\n  private getOverlayConfig(config: CalendarOverlayConfig): OverlayConfig {\r\n    const positionStrategy = this.overlay\r\n      .position()\r\n      .flexibleConnectedTo(this.hostElemRef)\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withDefaultOffsetY(12)\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n\r\n    const overlayConfig = new OverlayConfig({\r\n      hasBackdrop: config.hasBackdrop,\r\n      backdropClass: config.backdropClass,\r\n      panelClass: config.panelClass,\r\n      scrollStrategy: this.overlay.scrollStrategies.block(),\r\n      positionStrategy\r\n    });\r\n\r\n    return overlayConfig;\r\n  }\r\n\r\n  private createInjector(overlayRef: OverlayRef): PortalInjector {\r\n    const injectionTokens = new WeakMap();\r\n    injectionTokens.set(OverlayRef, overlayRef);\r\n\r\n    return new PortalInjector(this.injector, injectionTokens);\r\n  }\r\n}\r\n",
    "import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { CalendarOverlayService } from '../services/calendar-overlay.service';\r\nimport { RangeStoreService } from '../services/range-store.service';\r\nimport { Range, NgxDrpOptions } from '../model/model';\r\nimport { ConfigStoreService } from '../services/config-store.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-drp',\r\n  template: `<div> \r\n  \r\n  <mat-form-field class=\"ngx-mat-drp-date-display\">\r\n    <input class=\"ngx-mat-drp-date-input\"\r\n          matInput [placeholder]=\"options.placeholder\"\r\n          [value]=\"selectedDateRange\"\r\n          [matTooltip]=\"selectedDateRange\"\r\n          (click)=\"openCalendar($event)\"\r\n          readonly\r\n          #calendarInput >\r\n    <div matSuffix \r\n          class=\"ngx-mat-drp-calendar\"\r\n          (click)=\"openCalendar($event)\">\r\n    </div>\r\n  </mat-form-field>\r\n  \r\n</div>    \r\n`,\r\n  styles: [`.ngx-mat-drp-date-display{min-width:230px}.ngx-mat-drp-date-input{text-overflow:ellipsis;color:#4169e1}.ngx-mat-drp-calendar{background-image:url('data:image/svg+xml,<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"/>    <path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>');width:24px;height:24px}`],\r\n  providers: [\r\n    CalendarOverlayService,\r\n    RangeStoreService,\r\n    ConfigStoreService,\r\n    DatePipe\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatDrpComponent implements OnInit, OnDestroy {\r\n  @ViewChild('calendarInput')\r\n  calendarInput;\r\n  @Output()\r\n  readonly selectedDateRangeChanged: EventEmitter<Range> = new EventEmitter<Range>();\r\n  @Input()\r\n  options: NgxDrpOptions;\r\n  private rangeUpdate$: Subscription;\r\n  selectedDateRange = '';\r\n\r\n  constructor(\r\n    private changeDetectionRef: ChangeDetectorRef,\r\n    private calendarOverlayService: CalendarOverlayService,\r\n    public rangeStoreService: RangeStoreService,\r\n    public configStoreService: ConfigStoreService,\r\n    private datePipe: DatePipe\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.configStoreService.ngxDrpOptions = this.options;\r\n    this.options.placeholder = this.options.placeholder || 'Choose a date';\r\n    this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\r\n      const from: string = this.formatToDateString(\r\n        range.fromDate,\r\n        this.options.format\r\n      );\r\n      const to: string = this.formatToDateString(\r\n        range.toDate,\r\n        this.options.format\r\n      );\r\n      if (this.configStoreService.ngxDrpOptions.singleDate) {\r\n        this.selectedDateRange = `${from}`;\r\n      } else {\r\n        this.selectedDateRange = `${from} - ${to}`;\r\n      }\r\n      this.selectedDateRangeChanged.emit(range);\r\n    });\r\n\r\n    this.rangeStoreService.updateRange(\r\n      this.options.range.fromDate,\r\n      this.options.range.toDate\r\n    );\r\n    this.changeDetectionRef.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.rangeUpdate$) {\r\n      this.rangeUpdate$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private formatToDateString(date: Date, format: string): string {\r\n    return this.datePipe.transform(date, format);\r\n  }\r\n\r\n  openCalendar(event) {\r\n    const overlayRef: OverlayRef = this.calendarOverlayService.open(\r\n      this.options.calendarOverlayConfig,\r\n      this.calendarInput\r\n    );\r\n  }\r\n\r\n  public resetDates(range: Range) {\r\n    this.rangeStoreService.updateRange(\r\n      range.fromDate,\r\n      range.toDate\r\n    );\r\n  }\r\n}\r\n",
    "import {\r\n  Component,\r\n  ViewChild,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { MatCalendar } from '@angular/material/datepicker';\r\nimport { ConfigStoreService } from '../services/config-store.service';\r\n\r\n@Component({\r\n  selector: 'calendar-wrapper',\r\n  template: `<div>\r\n\r\n  <!-- <mat-divider></mat-divider> -->\r\n  <span class=\"ngx-mat-drp-date-label\">\r\n    <label>{{prefixLabel}}</label>\r\n    <label class=\"ngx-mat-drp-selected-date-label\">{{selectedDate | date:dateFormat}}</label>\r\n  </span>\r\n  <!-- <mat-divider></mat-divider> -->\r\n\r\n  <mat-calendar \r\n    [startAt]=\"selectedDate\"\r\n    [selected]=\"selectedDate\"\r\n    [minDate]=\"minDate\"\r\n    [maxDate]=\"maxDate\"\r\n    (selectedChange)=\"onSelectedChange($event)\"\r\n    (yearSelected)=\"onYearSelected($event)\"\r\n    (_userSelection)=\"onUserSelection($event)\"\r\n    [dateFilter]=\"weekendFilter\">\r\n  </mat-calendar>\r\n\r\n</div>`,\r\n  styles: [`.ngx-mat-drp-date-label{background:#fafafa;margin:15px;padding:4px 2px;width:100%;font-size:14px;font-weight:500}.ngx-mat-drp-selected-date-label{color:rgba(0,0,0,.38);padding-left:5%}`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CalendarWrapperComponent implements OnChanges {\r\n  @ViewChild(MatCalendar)\r\n  matCalendar: MatCalendar<Date>;\r\n\r\n  @Output()\r\n  readonly selectedDateChange: EventEmitter<Date> = new EventEmitter<Date>();\r\n\r\n  dateFormat: string;\r\n  @Input() selectedDate: Date;\r\n  @Input() prefixLabel: string;\r\n  @Input() minDate: Date;\r\n  @Input() maxDate: Date;\r\n  weekendFilter = (d: Date) => true;\r\n\r\n  constructor(private configStore: ConfigStoreService) {\r\n    this.dateFormat = configStore.ngxDrpOptions.format;\r\n    if (configStore.ngxDrpOptions.excludeWeekends) {\r\n      this.weekendFilter = (d: Date): boolean => {\r\n        const day = d.getDay();\r\n        return day !== 0 && day !== 6;\r\n      };\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Necessary to force view refresh\r\n    this.matCalendar.activeDate = changes.selectedDate.currentValue;\r\n  }\r\n\r\n  onSelectedChange(date) {\r\n    this.selectedDateChange.emit(date);\r\n  }\r\n\r\n  onYearSelected(e) {}\r\n\r\n  onUserSelection(e) {}\r\n}\r\n",
    "import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { PresetItem } from '../model/model';\r\n\r\n@Component({\r\n  selector: 'mat-drp-presets',\r\n  template: `<div>\r\n  <ul class=\"ngx-mat-drp-presets-list\">\r\n    <li *ngFor=\"let preset of presets\" (click)=\"setPresetPeriod(preset)\"> {{preset.presetLabel}} </li>\r\n  </ul>\r\n</div>`,\r\n  styles: [`.ngx-mat-drp-presets-list{list-style-type:none;margin:0;padding:0}.ngx-mat-drp-presets-list li{margin:5px 0;padding:4%;cursor:pointer;background:#fafafa;color:#3f51b5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-drp-presets-list li:hover{background:#3f51b5;color:#fff}`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PresetsComponent implements OnInit {\r\n  @Input()\r\n  presets: Array<PresetItem>;\r\n  @Output()\r\n  readonly presetChanged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  setPresetPeriod(event) {\r\n    this.presetChanged.emit(event);\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxMatDrpComponent } from './ngx-mat-drp/ngx-mat-drp.component';\r\nimport { PickerOverlayComponent } from './picker-overlay/picker-overlay.component';\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\n\r\nimport { CalendarWrapperComponent } from './calendar-wrapper/calendar-wrapper.component';\r\nimport { PresetsComponent } from './presets/presets.component';\r\nimport { DATE } from './services/range-store.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    OverlayModule\r\n  ],\r\n  declarations: [\r\n    NgxMatDrpComponent,\r\n    CalendarWrapperComponent,\r\n    PickerOverlayComponent,\r\n    PresetsComponent\r\n  ],\r\n  providers: [\r\n    {provide: DATE, useValue: new Date()}\r\n  ],\r\n  entryComponents: [PickerOverlayComponent],\r\n  exports: [NgxMatDrpComponent]\r\n})\r\nexport class NgxMatDrpModule { }\r\n"
  ],
  "names": [
    "DATE",
    "InjectionToken",
    "RangeStoreService",
    "_fromDate",
    "_toDate",
    "this",
    "rangeUpdate$",
    "Subject",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "updateRange",
    "fromDate",
    "toDate",
    "next",
    "type",
    "Injectable",
    "Date",
    "decorators",
    "Inject",
    "args",
    "ConfigStoreService",
    "defaultOptions",
    "excludeWeekends",
    "animation",
    "locale",
    "fromMinMax",
    "toMinMax",
    "rangeLabel",
    "singleDate",
    "_ngxDrpOptions",
    "set",
    "options",
    "assign",
    "pickerOverlayAnimations",
    "transformPanel",
    "trigger",
    "state",
    "style",
    "opacity",
    "transform",
    "transition",
    "group",
    "animate",
    "PickerOverlayComponent",
    "rangeStoreService",
    "configStoreService",
    "overlayRef",
    "presets",
    "ngOnInit",
    "startDatePrefix",
    "ngxDrpOptions",
    "endDatePrefix",
    "applyLabel",
    "cancelLabel",
    "shouldAnimate",
    "_a",
    "fromMinDate",
    "fromMaxDate",
    "_b",
    "toMinDate",
    "toMaxDate",
    "setSingleDate",
    "updateFromDate",
    "date",
    "updateToDate",
    "updateRangeByPreset",
    "presetItem",
    "range",
    "applyNewDates",
    "e",
    "disposeOverLay",
    "addEndDate",
    "discardNewDates",
    "dispose",
    "getRangeLabel",
    "addEndDateLabel",
    "removeEndDateLabel",
    "Component",
    "selector",
    "template",
    "styles",
    "animations",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "OverlayRef",
    "DEFAULT_CONFIG",
    "panelClass",
    "hasBackdrop",
    "backdropClass",
    "shouldCloseOnBackdropClick",
    "CalendarOverlayService",
    "overlay",
    "injector",
    "open",
    "config",
    "hostElemRef",
    "overlayConfig",
    "createOverlay",
    "portalInjector",
    "createInjector",
    "calendarPortal",
    "ComponentPortal",
    "attach",
    "backdropClick",
    "pipe",
    "takeWhile",
    "subscribe",
    "getOverlayConfig",
    "create",
    "positionStrategy",
    "position",
    "flexibleConnectedTo",
    "withFlexibleDimensions",
    "withViewportMargin",
    "withDefaultOffsetY",
    "withPositions",
    "originX",
    "originY",
    "overlayX",
    "overlayY",
    "OverlayConfig",
    "scrollStrategy",
    "scrollStrategies",
    "block",
    "injectionTokens",
    "WeakMap",
    "PortalInjector",
    "Overlay",
    "Injector",
    "NgxMatDrpComponent",
    "changeDetectionRef",
    "calendarOverlayService",
    "datePipe",
    "selectedDateRangeChanged",
    "EventEmitter",
    "selectedDateRange",
    "_this",
    "placeholder",
    "from",
    "formatToDateString",
    "format",
    "to",
    "emit",
    "detectChanges",
    "ngOnDestroy",
    "unsubscribe",
    "openCalendar",
    "event",
    "calendarOverlayConfig",
    "calendarInput",
    "resetDates",
    "providers",
    "DatePipe",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "ChangeDetectorRef",
    "ViewChild",
    "Output",
    "Input",
    "CalendarWrapperComponent",
    "configStore",
    "selectedDateChange",
    "weekendFilter",
    "d",
    "dateFormat",
    "day",
    "getDay",
    "ngOnChanges",
    "changes",
    "matCalendar",
    "activeDate",
    "currentValue",
    "onSelectedChange",
    "onYearSelected",
    "onUserSelection",
    "MatCalendar",
    "selectedDate",
    "prefixLabel",
    "minDate",
    "maxDate",
    "PresetsComponent",
    "presetChanged",
    "setPresetPeriod",
    "ɵ0",
    "NgxMatDrpModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatFormFieldModule",
    "MatDatepickerModule",
    "MatNativeDateModule",
    "MatInputModule",
    "MatButtonModule",
    "MatTooltipModule",
    "OverlayModule",
    "declarations",
    "provide",
    "useValue",
    "entryComponents",
    "exports"
  ],
  "mappings": "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"
}
